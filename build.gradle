// Gradle wrapper
task wrapper(type: Wrapper) {
    gradleVersion = '1.2'
}
repositories {
	mavenCentral()
}

/* Cargo Settings */
buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.gradle.api.plugins:gradle-cargo-plugin:0.5.7'
    }
}
apply plugin: 'jetty'
apply plugin: 'cargo'

dependencies {
    // Cargo deployment
    def cargoVersion = '1.3.1'
    cargo "org.codehaus.cargo:cargo-core-uberjar:$cargoVersion",
            "org.codehaus.cargo:cargo-ant:$cargoVersion"
}

// Setting deployment info.
// User's name and password for tomcat.
def givenUsername = TOMCAT_USERNAME
def givenPassword = TOMCAT_PASSWORD

// presentation name.
def presentationName = TOMCAT_PRESENTATION_NAME

cargo {
    containerId = 'tomcat7x'
	port = TOMCAT_PORT.toInteger()

    deployable {
        context = presentationName
    }

    remote {
        hostname = TOMCAT_HOST_NAME
        username = givenUsername
        password = givenPassword
    }
}

// Let developer know target url
// http://{TOMCAT_HOST_NAME}:{TOMCAT_PORT}/{presentationName}
def targetUrl = "http://$TOMCAT_HOST_NAME:$TOMCAT_PORT/$presentationName"

cargoDeployRemote.doLast {
    println ""
    println "******************************************************"
    println ""
    println "You can access the app on your browser through the URL"
    println "  $targetUrl"
    println ""
    println "******************************************************"
    println ""
}
cargoRedeployRemote.doLast {
    println ""
    println "******************************************************"
    println ""
    println "You can access the app on your browser through the URL"
    println "  $targetUrl"
    println ""
    println "******************************************************"
    println ""
}
cargoUndeployRemote.doLast {
    println ""
    println "******************************************************"
    println ""
    println "Now below URL does not work :"
    println "  $targetUrl"
    println ""
    println "******************************************************"
    println ""
}

// Make war before deployment
cargoDeployRemote.dependsOn war
cargoRedeployRemote.dependsOn war

// Make easy deployment task
def easyCommands = 'Easy Commands'
task deploy(dependsOn: cargoRedeployRemote) {
    group = easyCommands
    description = 'Deploy app to remote server'
}

task undeploy(dependsOn: cargoUndeployRemote) {
    group = easyCommands
    description = 'Undeploy app on remote server'
}
war.from 'dist'